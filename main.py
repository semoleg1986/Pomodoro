#!/usr/bin/env python3
import click
import datetime
import time
import os
import sys
import platform
from typing import Optional


def get_notification_command():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°."""
    system = platform.system()
    if system == "Darwin":  # macOS
        return "say"
    elif system == "Linux":
        return "notify-send"
    elif system == "Windows":
        return "powershell -c (New-Object Media.SoundPlayer 'C:\\Windows\\Media\\notify.wav').PlaySync()"
    return None


def play_notification(message: str):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°."""
    command = get_notification_command()
    if command:
        if platform.system() == "Windows":
            os.system(command)
        else:
            os.system(f"{command} '{message}'")


def pluralize_seconds(n):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç '—Å–µ–∫—É–Ω–¥–∞', '—Å–µ–∫—É–Ω–¥—ã' –∏–ª–∏ '—Å–µ–∫—É–Ω–¥' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞."""
    if 11 <= n % 100 <= 14:
        return "—Å–µ–∫—É–Ω–¥"
    last_digit = n % 10
    if last_digit == 1:
        return "—Å–µ–∫—É–Ω–¥–∞"
    elif 2 <= last_digit <= 4:
        return "—Å–µ–∫—É–Ω–¥—ã"
    else:
        return "—Å–µ–∫—É–Ω–¥"


def format_time(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = seconds % 60
    if hours > 0:
        return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
    return f"{minutes:02d}:{seconds:02d}"


def counter(minutes: int, notice: str = "–†–∞–±–æ—Ç–∞–µ–º", pause_event: Optional[click.Context] = None):
    """–°—á–µ—Ç—á–∏–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–∞—É–∑—ã –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º."""
    total_seconds = minutes * 60
    start_time = datetime.datetime.now()
    finish_time = start_time + datetime.timedelta(minutes=minutes)
    
    with click.progressbar(length=total_seconds, label=notice) as bar:
        while datetime.datetime.now() < finish_time:
            if pause_event and pause_event.paused:
                click.echo("\n–ü–∞—É–∑–∞. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                input()
                pause_event.paused = False
                start_time = datetime.datetime.now() - datetime.timedelta(seconds=bar.pos)
                finish_time = start_time + datetime.timedelta(minutes=minutes)
            
            remaining = finish_time - datetime.datetime.now()
            remaining_seconds = int(remaining.total_seconds())
            
            if remaining_seconds < 0:
                break
                
            bar.update(1)
            time.sleep(1)
    
    play_notification(f"{notice} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def sets_of_pomodoros(pomodoros: list, size: int) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–º–∏–¥–æ—Ä–æ–≤ –Ω–∞ —Å–µ—Ç—ã."""
    return [pomodoros[i:i + size] for i in range(0, len(pomodoros), size)]


def set_pomodoro(sets: list, work_min: int, break_min: int, relax_min: int, pause_event: Optional[click.Context] = None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∞–±–æ—Ä –ø–æ–º–∏–¥–æ—Ä–æ–≤ —Å –ø–µ—Ä–µ—Ä—ã–≤–∞–º–∏."""
    for index, set in enumerate(sets, 1):
        click.clear()
        for i, j in enumerate(set, 1):
            click.echo(f"–°–µ—Å—Å–∏—è {index}")
            play_notification(f"–°–µ—Å—Å–∏—è {index}. –ü–æ–º–æ–¥–æ—Ä–æ {i}")
            click.echo(f'–ü–æ–º–æ–¥–æ—Ä–æ {i}: {"üçÖ" * j}')
            
            try:
                counter(work_min, pause_event=pause_event)
                sys.stdout.write("\033[F\033[K")
                sys.stdout.flush()
                counter(break_min, notice="–û—Ç–¥—ã—Ö–∞–µ–º", pause_event=pause_event)
            except KeyboardInterrupt:
                if click.confirm("–•–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–º–æ–¥–æ—Ä–æ?"):
                    return
                continue
                
            click.clear()
        counter(relax_min, notice="–ë–æ–ª—å—à–æ–π –æ—Ç–¥—ã—Ö", pause_event=pause_event)


class PomodoroContext(click.Context):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—É–∑—ã."""
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.paused = False


@click.command()
@click.option(
    "--work-min", type=int, default=25, help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ–º–∏–¥–æ—Ä–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö)."
)
@click.option(
    "--break-min",
    type=int,
    default=5,
    help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö).",
)
@click.option(
    "--relax-min",
    type=int,
    default=15,
    help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö).",
)
@click.option("--pomodoros", type=int, default=8, help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–º–∏–¥–æ—Ä–æ–≤.")
@click.option(
    "--size",
    type=int,
    default=4,
    help="–†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ —Å–µ—Ç–∞ (–∫–æ–ª-–≤–æ –ø–æ–º–∏–¥–æ—Ä–æ–≤ –¥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞).",
)
@click.confirmation_option(prompt="–ó–∞–ø—É—Å–∫–∞–µ–º?")
def cli(work_min, break_min, relax_min, pomodoros, size):
    """–ü–æ–º–æ–¥–æ—Ä–æ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ. –õ–µ–≥–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –ª—é–±—ã—Ö –≤–∞—à–∏—Ö –∑–∞–¥–∞—á"""
    try:
        if not all(x > 0 for x in [work_min, break_min, relax_min, pomodoros, size]):
            raise click.BadParameter("–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏")
            
        if pomodoros < size:
            raise click.BadParameter("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–º–∏–¥–æ—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ —Ä–∞–∑–º–µ—Ä—É —Å–µ—Ç–∞")
            
        ctx = PomodoroContext(cli)
        all_pomodoros = list(range(1, pomodoros + 1))
        sets = sets_of_pomodoros(all_pomodoros, size)
        set_pomodoro(sets, work_min, break_min, relax_min, pause_event=ctx)
        play_notification("–ö–æ–Ω–µ—Ü")
        
    except KeyboardInterrupt:
        click.echo("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        click.echo(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", err=True)
        sys.exit(1)


if __name__ == "__main__":
    cli()
